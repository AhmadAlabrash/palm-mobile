/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation addReaction($request: ReactionRequest!) {\n  addReaction(request: $request)\n}": types.AddReactionDocument,
    "query generateModuleCurrencyApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {\n  generateModuleCurrencyApprovalData(request: $request) {\n    to\n    from\n    data\n  }\n}": types.GenerateModuleCurrencyApprovalDataDocument,
    "query approvedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {\n  approvedModuleAllowanceAmount(request: $request) {\n    currency\n    module\n    contractAddress\n    allowance\n  }\n}": types.ApprovedModuleAllowanceAmountDocument,
    "mutation createAttachMediaData($request: PublicMediaRequest!) {\n  createAttachMediaData(request: $request) {\n    signedUrl\n    media {\n      item\n      type\n      cover\n      source\n      altTag\n    }\n  }\n}": types.CreateAttachMediaDataDocument,
    "mutation authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}": types.AuthenticateDocument,
    "mutation Broadcast($request: BroadcastRequest!) {\n  broadcast(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}": types.BroadcastDocument,
    "mutation createBurnProfileTypedData($request: BurnProfileRequest!) {\n  createBurnProfileTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}": types.CreateBurnProfileTypedDataDocument,
    "query Challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    text\n  }\n}": types.ChallengeDocument,
    "mutation createCollectTypedData($request: CreateCollectRequest!) {\n  createCollectTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CollectWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        pubId\n        data\n      }\n    }\n  }\n}": types.CreateCollectTypedDataDocument,
    "mutation createCommentTypedData($request: CreatePublicCommentRequest!) {\n  createCommentTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CommentWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n        referenceModuleData\n      }\n    }\n  }\n}": types.CreateCommentTypedDataDocument,
    "fragment MediaFields on Media {\n  url\n  width\n  height\n  mimeType\n}\n\nfragment ProfileFields on Profile {\n  id\n  name\n  bio\n  attributes {\n    displayType\n    traitType\n    key\n    value\n  }\n  isFollowedByMe\n  isFollowing(who: null)\n  followNftAddress\n  metadata\n  isDefault\n  handle\n  picture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n      small {\n        ...MediaFields\n      }\n      medium {\n        ...MediaFields\n      }\n    }\n  }\n  coverPicture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n      small {\n        ...MediaFields\n      }\n      medium {\n        ...MediaFields\n      }\n    }\n  }\n  ownedBy\n  dispatcher {\n    address\n    canUseRelay\n  }\n  stats {\n    totalFollowers\n    totalFollowing\n    totalPosts\n    totalComments\n    totalMirrors\n    totalPublications\n    totalCollects\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n  onChainIdentity {\n    ens {\n      name\n    }\n    proofOfHumanity\n    sybilDotOrg {\n      verified\n      source {\n        twitter {\n          handle\n        }\n      }\n    }\n    worldcoin {\n      isHuman\n    }\n  }\n}\n\nfragment PublicationStatsFields on PublicationStats {\n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n}\n\nfragment MetadataOutputFields on MetadataOutput {\n  name\n  description\n  content\n  media {\n    original {\n      ...MediaFields\n    }\n    small {\n      ...MediaFields\n    }\n    medium {\n      ...MediaFields\n    }\n  }\n  attributes {\n    displayType\n    traitType\n    value\n  }\n  encryptionParams {\n    providerSpecificParams {\n      encryptionKey\n    }\n    accessCondition {\n      ...AccessConditionFields\n    }\n    encryptedFields {\n      animation_url\n      content\n      external_url\n      image\n      media {\n        ...EncryptedMediaSetFields\n      }\n    }\n  }\n}\n\nfragment Erc20Fields on Erc20 {\n  name\n  symbol\n  decimals\n  address\n}\n\nfragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment MirrorBaseFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment MirrorFields on Mirror {\n  ...MirrorBaseFields\n  mirrorOf {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment CommentBaseFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment CommentFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n      mirrorOf {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentMirrorOfFields\n        }\n      }\n    }\n  }\n}\n\nfragment CommentMirrorOfFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n    }\n  }\n}\n\nfragment TxReceiptFields on TransactionReceipt {\n  to\n  from\n  contractAddress\n  transactionIndex\n  root\n  gasUsed\n  logsBloom\n  blockHash\n  transactionHash\n  blockNumber\n  confirmations\n  cumulativeGasUsed\n  effectiveGasPrice\n  byzantium\n  type\n  status\n  logs {\n    blockNumber\n    blockHash\n    transactionIndex\n    removed\n    address\n    data\n    topics\n    transactionHash\n    logIndex\n  }\n}\n\nfragment WalletFields on Wallet {\n  address\n  defaultProfile {\n    ...ProfileFields\n  }\n}\n\nfragment CommonPaginatedResultInfoFields on PaginatedResultInfo {\n  prev\n  next\n  totalCount\n}\n\nfragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    type\n    amount {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n    recipient\n  }\n  ... on ProfileFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on RevertFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownFollowModuleSettings {\n    type\n    contractAddress\n    followModuleReturnData\n  }\n}\n\nfragment CollectModuleFields on CollectModule {\n  __typename\n  ... on FreeCollectModuleSettings {\n    type\n    followerOnly\n    contractAddress\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on RevertCollectModuleSettings {\n    type\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on UnknownCollectModuleSettings {\n    type\n    contractAddress\n    collectModuleReturnData\n  }\n}\n\nfragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownReferenceModuleSettings {\n    type\n    contractAddress\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    type\n    contractAddress\n    commentsRestricted\n    mirrorsRestricted\n    degreesOfSeparation\n  }\n}\n\nfragment Erc20OwnershipFields on Erc20OwnershipOutput {\n  contractAddress\n  amount\n  chainID\n  condition\n  decimals\n}\n\nfragment EoaOwnershipFields on EoaOwnershipOutput {\n  address\n}\n\nfragment NftOwnershipFields on NftOwnershipOutput {\n  contractAddress\n  chainID\n  contractType\n  tokenIds\n}\n\nfragment ProfileOwnershipFields on ProfileOwnershipOutput {\n  profileId\n}\n\nfragment FollowConditionFields on FollowConditionOutput {\n  profileId\n}\n\nfragment CollectConditionFields on CollectConditionOutput {\n  publicationId\n  thisPublication\n}\n\nfragment AndConditionFields on AndConditionOutput {\n  criteria {\n    ...AccessConditionFields\n  }\n}\n\nfragment OrConditionFields on OrConditionOutput {\n  criteria {\n    ...AccessConditionFields\n  }\n}\n\nfragment AndConditionFieldsNoRecursive on AndConditionOutput {\n  criteria {\n    ...SimpleConditionFields\n  }\n}\n\nfragment OrConditionFieldsNoRecursive on OrConditionOutput {\n  criteria {\n    ...SimpleConditionFields\n  }\n}\n\nfragment SimpleConditionFields on AccessConditionOutput {\n  nft {\n    ...NftOwnershipFields\n  }\n  eoa {\n    ...EoaOwnershipFields\n  }\n  token {\n    ...Erc20OwnershipFields\n  }\n  profile {\n    ...ProfileOwnershipFields\n  }\n  follow {\n    ...FollowConditionFields\n  }\n  collect {\n    ...CollectConditionFields\n  }\n}\n\nfragment BooleanConditionFieldsRecursive on AccessConditionOutput {\n  and {\n    criteria {\n      ...SimpleConditionFields\n      and {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n      or {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n    }\n  }\n  or {\n    criteria {\n      ...SimpleConditionFields\n      and {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n      or {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n    }\n  }\n}\n\nfragment AccessConditionFields on AccessConditionOutput {\n  ...SimpleConditionFields\n  ...BooleanConditionFieldsRecursive\n}\n\nfragment EncryptedMediaFields on EncryptedMedia {\n  url\n  width\n  height\n  mimeType\n}\n\nfragment EncryptedMediaSetFields on EncryptedMediaSet {\n  original {\n    ...EncryptedMediaFields\n  }\n  small {\n    ...EncryptedMediaFields\n  }\n  medium {\n    ...EncryptedMediaFields\n  }\n}": types.MediaFieldsFragmentDoc,
    "mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {\n  createCommentViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}": types.CreateCommentViaDispatcherDocument,
    "mutation CreateMirrorViaDispatcher($request: CreateMirrorRequest!) {\n  createMirrorViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}": types.CreateMirrorViaDispatcherDocument,
    "mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {\n  createPostViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}": types.CreatePostViaDispatcherDocument,
    "mutation createProfile($request: CreateProfileRequest!) {\n  createProfile(request: $request) {\n    ... on RelayerResult {\n      txHash\n    }\n    ... on RelayError {\n      reason\n    }\n    __typename\n  }\n}": types.CreateProfileDocument,
    "mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURIViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}": types.CreateSetProfileImageUriViaDispatcherDocument,
    "mutation CreateSetProfileMetadataViaDispatcher($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}": types.CreateSetProfileMetadataViaDispatcherDocument,
    "mutation CreateSetDispatcherTypedData($request: SetDispatcherRequest!) {\n  createSetDispatcherTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDispatcherWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        dispatcher\n      }\n    }\n  }\n}": types.CreateSetDispatcherTypedDataDocument,
    "query doesFollow($request: DoesFollowRequest!) {\n  doesFollow(request: $request) {\n    followerAddress\n    profileId\n    follows\n  }\n}": types.DoesFollowDocument,
    "query enabledModuleCurrencies {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}": types.EnabledModuleCurrenciesDocument,
    "query enabledModules {\n  enabledModules {\n    collectModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n    followModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n    referenceModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n  }\n}": types.EnabledModulesDocument,
    "query exploreProfiles($request: ExploreProfilesRequest!) {\n  exploreProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.ExploreProfilesDocument,
    "query ExplorePublications($request: ExplorePublicationRequest!) {\n  explorePublications(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.ExplorePublicationsDocument,
    "mutation createFollowTypedData($request: FollowRequest!) {\n  createFollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        FollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        datas\n      }\n    }\n  }\n}": types.CreateFollowTypedDataDocument,
    "query followerNftOwnedTokenIds($request: FollowerNftOwnedTokenIdsRequest!) {\n  followerNftOwnedTokenIds(request: $request) {\n    followerNftAddress\n    tokensIds\n  }\n}": types.FollowerNftOwnedTokenIdsDocument,
    "query followers($request: FollowersRequest!) {\n  followers(request: $request) {\n    items {\n      wallet {\n        ...WalletFields\n      }\n      totalAmountOfTimesFollowed\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.FollowersDocument,
    "query following($request: FollowingRequest!) {\n  following(request: $request) {\n    items {\n      profile {\n        ...ProfileFields\n      }\n      totalAmountOfTimesFollowing\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.FollowingDocument,
    "query defaultProfile($request: DefaultProfileRequest!) {\n  defaultProfile(request: $request) {\n    ...ProfileFields\n  }\n}": types.DefaultProfileDocument,
    "query profile($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    ...ProfileFields\n  }\n}": types.ProfileDocument,
    "query profiles($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.ProfilesDocument,
    "query publicationEncrypted($request: PublicationQueryRequest!, $profileId: ProfileId!) {\n  publication(request: $request) {\n    __typename\n    ... on Post {\n      ...PostFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n    ... on Comment {\n      ...CommentFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n    ... on Mirror {\n      ...MirrorFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n  }\n}": types.PublicationEncryptedDocument,
    "query publication($request: PublicationQueryRequest!) {\n  publication(request: $request) {\n    __typename\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}": types.PublicationDocument,
    "query publications($request: PublicationsQueryRequest!) {\n  publications(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.PublicationsDocument,
    "query nfts($request: NFTsRequest!) {\n  nfts(request: $request) {\n    items {\n      contractName\n      contractAddress\n      symbol\n      tokenId\n      owners {\n        amount\n        address\n      }\n      name\n      description\n      contentURI\n      originalContent {\n        uri\n        metaType\n      }\n      chainId\n      collectionName\n      ercType\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.NftsDocument,
    "query globalProtocolStats($request: GlobalProtocolStatsRequest) {\n  globalProtocolStats(request: $request) {\n    totalProfiles\n    totalBurntProfiles\n    totalPosts\n    totalMirrors\n    totalComments\n    totalCollects\n    totalFollows\n    totalRevenue {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n}": types.GlobalProtocolStatsDocument,
    "query hasTxHashBeenIndexed($request: HasTxHashBeenIndexedRequest!) {\n  hasTxHashBeenIndexed(request: $request) {\n    __typename\n    ... on TransactionIndexedResult {\n      indexed\n      txReceipt {\n        ...TxReceiptFields\n      }\n      metadataStatus {\n        status\n        reason\n      }\n    }\n    ... on TransactionError {\n      reason\n      txReceipt {\n        ...TxReceiptFields\n      }\n    }\n  }\n}": types.HasTxHashBeenIndexedDocument,
    "mutation hidePublication($request: HidePublicationRequest!) {\n  hidePublication(request: $request)\n}": types.HidePublicationDocument,
    "mutation createMirrorTypedData($request: CreateMirrorRequest!) {\n  createMirrorTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        MirrorWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        referenceModuleData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}": types.CreateMirrorTypedDataDocument,
    "query MutualFollowersProfiles($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.MutualFollowersProfilesDocument,
    "query nftOwnershipChallenge($request: NftOwnershipChallengeRequest!) {\n  nftOwnershipChallenge(request: $request) {\n    id\n    text\n  }\n}": types.NftOwnershipChallengeDocument,
    "query pendingApprovalFollows($request: PendingApprovalFollowsRequest!) {\n  pendingApprovalFollows(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.PendingApprovalFollowsDocument,
    "query ping {\n  ping\n}": types.PingDocument,
    "mutation createPostTypedData($request: CreatePublicPostRequest!) {\n  createPostTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        PostWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}": types.CreatePostTypedDataDocument,
    "query ProfileFeed($request: FeedRequest!) {\n  feed(request: $request) {\n    items {\n      root {\n        __typename\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      electedMirror {\n        mirrorId\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      mirrors {\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      collects {\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      reactions {\n        profile {\n          id\n          handle\n        }\n        reaction\n        timestamp\n      }\n      comments {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      prev\n      next\n      totalCount\n    }\n  }\n}": types.ProfileFeedDocument,
    "query ProfileFollowRevenue($request: ProfileFollowRevenueQueryRequest!) {\n  profileFollowRevenue(request: $request) {\n    revenues {\n      total {\n        asset {\n          name\n          symbol\n          decimals\n          address\n        }\n        value\n      }\n    }\n  }\n}": types.ProfileFollowRevenueDocument,
    "query ProfilePublicationRevenue($request: ProfilePublicationRevenueQueryRequest!) {\n  profilePublicationRevenue(request: $request) {\n    items {\n      publication {\n        __typename\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n        ... on Mirror {\n          ...MirrorFields\n        }\n      }\n      revenue {\n        total {\n          asset {\n            name\n            symbol\n            decimals\n            address\n          }\n          value\n        }\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.ProfilePublicationRevenueDocument,
    "query ProfilePublicationsForSale($request: ProfilePublicationsForSaleRequest!) {\n  profilePublicationsForSale(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.ProfilePublicationsForSaleDocument,
    "query ProxyActionStatus($proxyActionId: ProxyActionId!) {\n  proxyActionStatus(proxyActionId: $proxyActionId) {\n    ... on ProxyActionStatusResult {\n      txHash\n      txId\n      status\n    }\n    ... on ProxyActionError {\n      reason\n      lastKnownTxId\n    }\n    ... on ProxyActionQueued {\n      queuedAt\n    }\n  }\n}": types.ProxyActionStatusDocument,
    "mutation ProxyAction($request: ProxyActionRequest!) {\n  proxyAction(request: $request)\n}": types.ProxyActionDocument,
    "query PublicationRevenue($request: PublicationRevenueQueryRequest!) {\n  publicationRevenue(request: $request) {\n    publication {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    revenue {\n      total {\n        asset {\n          name\n          symbol\n          decimals\n          address\n        }\n        value\n      }\n    }\n  }\n}": types.PublicationRevenueDocument,
    "query recommendedProfiles {\n  recommendedProfiles {\n    ...ProfileFields\n  }\n}": types.RecommendedProfilesDocument,
    "mutation Refresh($request: RefreshRequest!) {\n  refresh(request: $request) {\n    accessToken\n    refreshToken\n  }\n}": types.RefreshDocument,
    "mutation removeReaction($request: ReactionRequest!) {\n  removeReaction(request: $request)\n}": types.RemoveReactionDocument,
    "mutation reportPublication($request: ReportPublicationRequest!) {\n  reportPublication(request: $request)\n}": types.ReportPublicationDocument,
    "query SearchProfiles($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on ProfileSearchResult {\n      __typename\n      items {\n        ... on Profile {\n          ...ProfileFields\n        }\n      }\n      pageInfo {\n        ...CommonPaginatedResultInfoFields\n      }\n    }\n  }\n}": types.SearchProfilesDocument,
    "query SearchPublications($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on PublicationSearchResult {\n      __typename\n      items {\n        __typename\n        ... on Comment {\n          ...CommentFields\n        }\n        ... on Post {\n          ...PostFields\n        }\n      }\n      pageInfo {\n        ...CommonPaginatedResultInfoFields\n      }\n    }\n  }\n}": types.SearchPublicationsDocument,
    "mutation createSetDefaultProfileTypedData($request: CreateSetDefaultProfileRequest!) {\n  createSetDefaultProfileTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDefaultProfileWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        wallet\n        profileId\n      }\n    }\n  }\n}": types.CreateSetDefaultProfileTypedDataDocument,
    "mutation createSetFollowModuleTypedData($request: CreateSetFollowModuleRequest!) {\n  createSetFollowModuleTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowModuleWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        followModule\n        followModuleInitData\n      }\n    }\n  }\n}": types.CreateSetFollowModuleTypedDataDocument,
    "mutation createSetFollowNFTUriTypedData($request: CreateSetFollowNFTUriRequest!) {\n  createSetFollowNFTUriTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowNFTURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        profileId\n        deadline\n        followNFTURI\n      }\n    }\n  }\n}": types.CreateSetFollowNftUriTypedDataDocument,
    "mutation createSetProfileImageURITypedData($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURITypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetProfileImageURIWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        imageURI\n        profileId\n      }\n    }\n  }\n}": types.CreateSetProfileImageUriTypedDataDocument,
    "mutation createSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetProfileMetadataURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        metadata\n      }\n    }\n  }\n}": types.CreateSetProfileMetadataTypedDataDocument,
    "mutation createToggleFollowTypedData($request: CreateToggleFollowRequest!) {\n  createToggleFollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        ToggleFollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        enables\n      }\n    }\n  }\n}": types.CreateToggleFollowTypedDataDocument,
    "mutation createUnfollowTypedData($request: UnfollowRequest!) {\n  createUnfollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}": types.CreateUnfollowTypedDataDocument,
    "query notifications($request: NotificationRequest!) {\n  notifications(request: $request) {\n    items {\n      ... on NewFollowerNotification {\n        notificationId\n        ...NewFollowerNotificationFields\n      }\n      ... on NewMirrorNotification {\n        notificationId\n        ...NewMirrorNotificationFields\n      }\n      ... on NewCollectNotification {\n        notificationId\n        ...NewCollectNotificationFields\n      }\n      ... on NewCommentNotification {\n        notificationId\n        ...NewCommentNotificationFields\n      }\n      ... on NewMentionNotification {\n        notificationId\n        ...NewMentionNotificationFields\n      }\n      ... on NewReactionNotification {\n        notificationId\n        ...NewReactionNotificationFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}\n\nfragment CommentWithCommentedPublicationFields on Comment {\n  ...CommentFields\n  commentOn {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewFollowerNotificationFields on NewFollowerNotification {\n  __typename\n  createdAt\n  isFollowedByMe\n  wallet {\n    ...WalletFields\n  }\n}\n\nfragment NewCollectNotificationFields on NewCollectNotification {\n  __typename\n  createdAt\n  wallet {\n    ...WalletFields\n  }\n  collectedPublication {\n    __typename\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewMirrorNotificationFields on NewMirrorNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  publication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewCommentNotificationFields on NewCommentNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  comment {\n    ...CommentWithCommentedPublicationFields\n  }\n}\n\nfragment NewMentionNotificationFields on NewMentionNotification {\n  __typename\n  mentionPublication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n  createdAt\n}\n\nfragment NewReactionNotificationFields on NewReactionNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  reaction\n  publication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}": types.NotificationsDocument,
    "query verify($request: VerifyRequest!) {\n  verify(request: $request)\n}": types.VerifyDocument,
    "query whoCollectedPublication($request: WhoCollectedPublicationRequest!) {\n  whoCollectedPublication(request: $request) {\n    items {\n      ...WalletFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.WhoCollectedPublicationDocument,
    "query WhoReactedPublication($request: WhoReactedPublicationRequest!) {\n  whoReactedPublication(request: $request) {\n    items {\n      reactionId\n      reaction\n      reactionAt\n      profile {\n        ...ProfileFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}": types.WhoReactedPublicationDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation addReaction($request: ReactionRequest!) {\n  addReaction(request: $request)\n}"): (typeof documents)["mutation addReaction($request: ReactionRequest!) {\n  addReaction(request: $request)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query generateModuleCurrencyApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {\n  generateModuleCurrencyApprovalData(request: $request) {\n    to\n    from\n    data\n  }\n}"): (typeof documents)["query generateModuleCurrencyApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {\n  generateModuleCurrencyApprovalData(request: $request) {\n    to\n    from\n    data\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query approvedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {\n  approvedModuleAllowanceAmount(request: $request) {\n    currency\n    module\n    contractAddress\n    allowance\n  }\n}"): (typeof documents)["query approvedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {\n  approvedModuleAllowanceAmount(request: $request) {\n    currency\n    module\n    contractAddress\n    allowance\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createAttachMediaData($request: PublicMediaRequest!) {\n  createAttachMediaData(request: $request) {\n    signedUrl\n    media {\n      item\n      type\n      cover\n      source\n      altTag\n    }\n  }\n}"): (typeof documents)["mutation createAttachMediaData($request: PublicMediaRequest!) {\n  createAttachMediaData(request: $request) {\n    signedUrl\n    media {\n      item\n      type\n      cover\n      source\n      altTag\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"): (typeof documents)["mutation authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Broadcast($request: BroadcastRequest!) {\n  broadcast(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation Broadcast($request: BroadcastRequest!) {\n  broadcast(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createBurnProfileTypedData($request: BurnProfileRequest!) {\n  createBurnProfileTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"): (typeof documents)["mutation createBurnProfileTypedData($request: BurnProfileRequest!) {\n  createBurnProfileTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    text\n  }\n}"): (typeof documents)["query Challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    text\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createCollectTypedData($request: CreateCollectRequest!) {\n  createCollectTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CollectWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        pubId\n        data\n      }\n    }\n  }\n}"): (typeof documents)["mutation createCollectTypedData($request: CreateCollectRequest!) {\n  createCollectTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CollectWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        pubId\n        data\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createCommentTypedData($request: CreatePublicCommentRequest!) {\n  createCommentTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CommentWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n        referenceModuleData\n      }\n    }\n  }\n}"): (typeof documents)["mutation createCommentTypedData($request: CreatePublicCommentRequest!) {\n  createCommentTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CommentWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n        referenceModuleData\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MediaFields on Media {\n  url\n  width\n  height\n  mimeType\n}\n\nfragment ProfileFields on Profile {\n  id\n  name\n  bio\n  attributes {\n    displayType\n    traitType\n    key\n    value\n  }\n  isFollowedByMe\n  isFollowing(who: null)\n  followNftAddress\n  metadata\n  isDefault\n  handle\n  picture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n      small {\n        ...MediaFields\n      }\n      medium {\n        ...MediaFields\n      }\n    }\n  }\n  coverPicture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n      small {\n        ...MediaFields\n      }\n      medium {\n        ...MediaFields\n      }\n    }\n  }\n  ownedBy\n  dispatcher {\n    address\n    canUseRelay\n  }\n  stats {\n    totalFollowers\n    totalFollowing\n    totalPosts\n    totalComments\n    totalMirrors\n    totalPublications\n    totalCollects\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n  onChainIdentity {\n    ens {\n      name\n    }\n    proofOfHumanity\n    sybilDotOrg {\n      verified\n      source {\n        twitter {\n          handle\n        }\n      }\n    }\n    worldcoin {\n      isHuman\n    }\n  }\n}\n\nfragment PublicationStatsFields on PublicationStats {\n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n}\n\nfragment MetadataOutputFields on MetadataOutput {\n  name\n  description\n  content\n  media {\n    original {\n      ...MediaFields\n    }\n    small {\n      ...MediaFields\n    }\n    medium {\n      ...MediaFields\n    }\n  }\n  attributes {\n    displayType\n    traitType\n    value\n  }\n  encryptionParams {\n    providerSpecificParams {\n      encryptionKey\n    }\n    accessCondition {\n      ...AccessConditionFields\n    }\n    encryptedFields {\n      animation_url\n      content\n      external_url\n      image\n      media {\n        ...EncryptedMediaSetFields\n      }\n    }\n  }\n}\n\nfragment Erc20Fields on Erc20 {\n  name\n  symbol\n  decimals\n  address\n}\n\nfragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment MirrorBaseFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment MirrorFields on Mirror {\n  ...MirrorBaseFields\n  mirrorOf {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment CommentBaseFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment CommentFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n      mirrorOf {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentMirrorOfFields\n        }\n      }\n    }\n  }\n}\n\nfragment CommentMirrorOfFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n    }\n  }\n}\n\nfragment TxReceiptFields on TransactionReceipt {\n  to\n  from\n  contractAddress\n  transactionIndex\n  root\n  gasUsed\n  logsBloom\n  blockHash\n  transactionHash\n  blockNumber\n  confirmations\n  cumulativeGasUsed\n  effectiveGasPrice\n  byzantium\n  type\n  status\n  logs {\n    blockNumber\n    blockHash\n    transactionIndex\n    removed\n    address\n    data\n    topics\n    transactionHash\n    logIndex\n  }\n}\n\nfragment WalletFields on Wallet {\n  address\n  defaultProfile {\n    ...ProfileFields\n  }\n}\n\nfragment CommonPaginatedResultInfoFields on PaginatedResultInfo {\n  prev\n  next\n  totalCount\n}\n\nfragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    type\n    amount {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n    recipient\n  }\n  ... on ProfileFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on RevertFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownFollowModuleSettings {\n    type\n    contractAddress\n    followModuleReturnData\n  }\n}\n\nfragment CollectModuleFields on CollectModule {\n  __typename\n  ... on FreeCollectModuleSettings {\n    type\n    followerOnly\n    contractAddress\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on RevertCollectModuleSettings {\n    type\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on UnknownCollectModuleSettings {\n    type\n    contractAddress\n    collectModuleReturnData\n  }\n}\n\nfragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownReferenceModuleSettings {\n    type\n    contractAddress\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    type\n    contractAddress\n    commentsRestricted\n    mirrorsRestricted\n    degreesOfSeparation\n  }\n}\n\nfragment Erc20OwnershipFields on Erc20OwnershipOutput {\n  contractAddress\n  amount\n  chainID\n  condition\n  decimals\n}\n\nfragment EoaOwnershipFields on EoaOwnershipOutput {\n  address\n}\n\nfragment NftOwnershipFields on NftOwnershipOutput {\n  contractAddress\n  chainID\n  contractType\n  tokenIds\n}\n\nfragment ProfileOwnershipFields on ProfileOwnershipOutput {\n  profileId\n}\n\nfragment FollowConditionFields on FollowConditionOutput {\n  profileId\n}\n\nfragment CollectConditionFields on CollectConditionOutput {\n  publicationId\n  thisPublication\n}\n\nfragment AndConditionFields on AndConditionOutput {\n  criteria {\n    ...AccessConditionFields\n  }\n}\n\nfragment OrConditionFields on OrConditionOutput {\n  criteria {\n    ...AccessConditionFields\n  }\n}\n\nfragment AndConditionFieldsNoRecursive on AndConditionOutput {\n  criteria {\n    ...SimpleConditionFields\n  }\n}\n\nfragment OrConditionFieldsNoRecursive on OrConditionOutput {\n  criteria {\n    ...SimpleConditionFields\n  }\n}\n\nfragment SimpleConditionFields on AccessConditionOutput {\n  nft {\n    ...NftOwnershipFields\n  }\n  eoa {\n    ...EoaOwnershipFields\n  }\n  token {\n    ...Erc20OwnershipFields\n  }\n  profile {\n    ...ProfileOwnershipFields\n  }\n  follow {\n    ...FollowConditionFields\n  }\n  collect {\n    ...CollectConditionFields\n  }\n}\n\nfragment BooleanConditionFieldsRecursive on AccessConditionOutput {\n  and {\n    criteria {\n      ...SimpleConditionFields\n      and {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n      or {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n    }\n  }\n  or {\n    criteria {\n      ...SimpleConditionFields\n      and {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n      or {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n    }\n  }\n}\n\nfragment AccessConditionFields on AccessConditionOutput {\n  ...SimpleConditionFields\n  ...BooleanConditionFieldsRecursive\n}\n\nfragment EncryptedMediaFields on EncryptedMedia {\n  url\n  width\n  height\n  mimeType\n}\n\nfragment EncryptedMediaSetFields on EncryptedMediaSet {\n  original {\n    ...EncryptedMediaFields\n  }\n  small {\n    ...EncryptedMediaFields\n  }\n  medium {\n    ...EncryptedMediaFields\n  }\n}"): (typeof documents)["fragment MediaFields on Media {\n  url\n  width\n  height\n  mimeType\n}\n\nfragment ProfileFields on Profile {\n  id\n  name\n  bio\n  attributes {\n    displayType\n    traitType\n    key\n    value\n  }\n  isFollowedByMe\n  isFollowing(who: null)\n  followNftAddress\n  metadata\n  isDefault\n  handle\n  picture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n      small {\n        ...MediaFields\n      }\n      medium {\n        ...MediaFields\n      }\n    }\n  }\n  coverPicture {\n    ... on NftImage {\n      contractAddress\n      tokenId\n      uri\n      verified\n    }\n    ... on MediaSet {\n      original {\n        ...MediaFields\n      }\n      small {\n        ...MediaFields\n      }\n      medium {\n        ...MediaFields\n      }\n    }\n  }\n  ownedBy\n  dispatcher {\n    address\n    canUseRelay\n  }\n  stats {\n    totalFollowers\n    totalFollowing\n    totalPosts\n    totalComments\n    totalMirrors\n    totalPublications\n    totalCollects\n  }\n  followModule {\n    ...FollowModuleFields\n  }\n  onChainIdentity {\n    ens {\n      name\n    }\n    proofOfHumanity\n    sybilDotOrg {\n      verified\n      source {\n        twitter {\n          handle\n        }\n      }\n    }\n    worldcoin {\n      isHuman\n    }\n  }\n}\n\nfragment PublicationStatsFields on PublicationStats {\n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n}\n\nfragment MetadataOutputFields on MetadataOutput {\n  name\n  description\n  content\n  media {\n    original {\n      ...MediaFields\n    }\n    small {\n      ...MediaFields\n    }\n    medium {\n      ...MediaFields\n    }\n  }\n  attributes {\n    displayType\n    traitType\n    value\n  }\n  encryptionParams {\n    providerSpecificParams {\n      encryptionKey\n    }\n    accessCondition {\n      ...AccessConditionFields\n    }\n    encryptedFields {\n      animation_url\n      content\n      external_url\n      image\n      media {\n        ...EncryptedMediaSetFields\n      }\n    }\n  }\n}\n\nfragment Erc20Fields on Erc20 {\n  name\n  symbol\n  decimals\n  address\n}\n\nfragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment MirrorBaseFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment MirrorFields on Mirror {\n  ...MirrorBaseFields\n  mirrorOf {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment CommentBaseFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  stats {\n    ...PublicationStatsFields\n  }\n  metadata {\n    ...MetadataOutputFields\n  }\n  createdAt\n  collectModule {\n    ...CollectModuleFields\n  }\n  referenceModule {\n    ...ReferenceModuleFields\n  }\n  appId\n  hidden\n  reaction(request: null)\n  mirrors(by: null)\n  hasCollectedByMe\n  isGated\n}\n\nfragment CommentFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n      mirrorOf {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentMirrorOfFields\n        }\n      }\n    }\n  }\n}\n\nfragment CommentMirrorOfFields on Comment {\n  ...CommentBaseFields\n  mainPost {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorBaseFields\n    }\n  }\n}\n\nfragment TxReceiptFields on TransactionReceipt {\n  to\n  from\n  contractAddress\n  transactionIndex\n  root\n  gasUsed\n  logsBloom\n  blockHash\n  transactionHash\n  blockNumber\n  confirmations\n  cumulativeGasUsed\n  effectiveGasPrice\n  byzantium\n  type\n  status\n  logs {\n    blockNumber\n    blockHash\n    transactionIndex\n    removed\n    address\n    data\n    topics\n    transactionHash\n    logIndex\n  }\n}\n\nfragment WalletFields on Wallet {\n  address\n  defaultProfile {\n    ...ProfileFields\n  }\n}\n\nfragment CommonPaginatedResultInfoFields on PaginatedResultInfo {\n  prev\n  next\n  totalCount\n}\n\nfragment FollowModuleFields on FollowModule {\n  ... on FeeFollowModuleSettings {\n    type\n    amount {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n    recipient\n  }\n  ... on ProfileFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on RevertFollowModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownFollowModuleSettings {\n    type\n    contractAddress\n    followModuleReturnData\n  }\n}\n\nfragment CollectModuleFields on CollectModule {\n  __typename\n  ... on FreeCollectModuleSettings {\n    type\n    followerOnly\n    contractAddress\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on RevertCollectModuleSettings {\n    type\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    amount {\n      asset {\n        ...Erc20Fields\n      }\n      value\n    }\n    recipient\n    referralFee\n    endTimestamp\n  }\n  ... on UnknownCollectModuleSettings {\n    type\n    contractAddress\n    collectModuleReturnData\n  }\n}\n\nfragment ReferenceModuleFields on ReferenceModule {\n  ... on FollowOnlyReferenceModuleSettings {\n    type\n    contractAddress\n  }\n  ... on UnknownReferenceModuleSettings {\n    type\n    contractAddress\n    referenceModuleReturnData\n  }\n  ... on DegreesOfSeparationReferenceModuleSettings {\n    type\n    contractAddress\n    commentsRestricted\n    mirrorsRestricted\n    degreesOfSeparation\n  }\n}\n\nfragment Erc20OwnershipFields on Erc20OwnershipOutput {\n  contractAddress\n  amount\n  chainID\n  condition\n  decimals\n}\n\nfragment EoaOwnershipFields on EoaOwnershipOutput {\n  address\n}\n\nfragment NftOwnershipFields on NftOwnershipOutput {\n  contractAddress\n  chainID\n  contractType\n  tokenIds\n}\n\nfragment ProfileOwnershipFields on ProfileOwnershipOutput {\n  profileId\n}\n\nfragment FollowConditionFields on FollowConditionOutput {\n  profileId\n}\n\nfragment CollectConditionFields on CollectConditionOutput {\n  publicationId\n  thisPublication\n}\n\nfragment AndConditionFields on AndConditionOutput {\n  criteria {\n    ...AccessConditionFields\n  }\n}\n\nfragment OrConditionFields on OrConditionOutput {\n  criteria {\n    ...AccessConditionFields\n  }\n}\n\nfragment AndConditionFieldsNoRecursive on AndConditionOutput {\n  criteria {\n    ...SimpleConditionFields\n  }\n}\n\nfragment OrConditionFieldsNoRecursive on OrConditionOutput {\n  criteria {\n    ...SimpleConditionFields\n  }\n}\n\nfragment SimpleConditionFields on AccessConditionOutput {\n  nft {\n    ...NftOwnershipFields\n  }\n  eoa {\n    ...EoaOwnershipFields\n  }\n  token {\n    ...Erc20OwnershipFields\n  }\n  profile {\n    ...ProfileOwnershipFields\n  }\n  follow {\n    ...FollowConditionFields\n  }\n  collect {\n    ...CollectConditionFields\n  }\n}\n\nfragment BooleanConditionFieldsRecursive on AccessConditionOutput {\n  and {\n    criteria {\n      ...SimpleConditionFields\n      and {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n      or {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n    }\n  }\n  or {\n    criteria {\n      ...SimpleConditionFields\n      and {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n      or {\n        criteria {\n          ...SimpleConditionFields\n        }\n      }\n    }\n  }\n}\n\nfragment AccessConditionFields on AccessConditionOutput {\n  ...SimpleConditionFields\n  ...BooleanConditionFieldsRecursive\n}\n\nfragment EncryptedMediaFields on EncryptedMedia {\n  url\n  width\n  height\n  mimeType\n}\n\nfragment EncryptedMediaSetFields on EncryptedMediaSet {\n  original {\n    ...EncryptedMediaFields\n  }\n  small {\n    ...EncryptedMediaFields\n  }\n  medium {\n    ...EncryptedMediaFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {\n  createCommentViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {\n  createCommentViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateMirrorViaDispatcher($request: CreateMirrorRequest!) {\n  createMirrorViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation CreateMirrorViaDispatcher($request: CreateMirrorRequest!) {\n  createMirrorViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {\n  createPostViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {\n  createPostViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createProfile($request: CreateProfileRequest!) {\n  createProfile(request: $request) {\n    ... on RelayerResult {\n      txHash\n    }\n    ... on RelayError {\n      reason\n    }\n    __typename\n  }\n}"): (typeof documents)["mutation createProfile($request: CreateProfileRequest!) {\n  createProfile(request: $request) {\n    ... on RelayerResult {\n      txHash\n    }\n    ... on RelayError {\n      reason\n    }\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURIViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURIViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateSetProfileMetadataViaDispatcher($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"): (typeof documents)["mutation CreateSetProfileMetadataViaDispatcher($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataViaDispatcher(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateSetDispatcherTypedData($request: SetDispatcherRequest!) {\n  createSetDispatcherTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDispatcherWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        dispatcher\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateSetDispatcherTypedData($request: SetDispatcherRequest!) {\n  createSetDispatcherTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDispatcherWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        dispatcher\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query doesFollow($request: DoesFollowRequest!) {\n  doesFollow(request: $request) {\n    followerAddress\n    profileId\n    follows\n  }\n}"): (typeof documents)["query doesFollow($request: DoesFollowRequest!) {\n  doesFollow(request: $request) {\n    followerAddress\n    profileId\n    follows\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query enabledModuleCurrencies {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"): (typeof documents)["query enabledModuleCurrencies {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query enabledModules {\n  enabledModules {\n    collectModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n    followModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n    referenceModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n  }\n}"): (typeof documents)["query enabledModules {\n  enabledModules {\n    collectModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n    followModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n    referenceModules {\n      moduleName\n      contractAddress\n      inputParams {\n        name\n        type\n      }\n      redeemParams {\n        name\n        type\n      }\n      returnDataParms {\n        name\n        type\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query exploreProfiles($request: ExploreProfilesRequest!) {\n  exploreProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query exploreProfiles($request: ExploreProfilesRequest!) {\n  exploreProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ExplorePublications($request: ExplorePublicationRequest!) {\n  explorePublications(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query ExplorePublications($request: ExplorePublicationRequest!) {\n  explorePublications(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createFollowTypedData($request: FollowRequest!) {\n  createFollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        FollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        datas\n      }\n    }\n  }\n}"): (typeof documents)["mutation createFollowTypedData($request: FollowRequest!) {\n  createFollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        FollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        datas\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query followerNftOwnedTokenIds($request: FollowerNftOwnedTokenIdsRequest!) {\n  followerNftOwnedTokenIds(request: $request) {\n    followerNftAddress\n    tokensIds\n  }\n}"): (typeof documents)["query followerNftOwnedTokenIds($request: FollowerNftOwnedTokenIdsRequest!) {\n  followerNftOwnedTokenIds(request: $request) {\n    followerNftAddress\n    tokensIds\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query followers($request: FollowersRequest!) {\n  followers(request: $request) {\n    items {\n      wallet {\n        ...WalletFields\n      }\n      totalAmountOfTimesFollowed\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query followers($request: FollowersRequest!) {\n  followers(request: $request) {\n    items {\n      wallet {\n        ...WalletFields\n      }\n      totalAmountOfTimesFollowed\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query following($request: FollowingRequest!) {\n  following(request: $request) {\n    items {\n      profile {\n        ...ProfileFields\n      }\n      totalAmountOfTimesFollowing\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query following($request: FollowingRequest!) {\n  following(request: $request) {\n    items {\n      profile {\n        ...ProfileFields\n      }\n      totalAmountOfTimesFollowing\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query defaultProfile($request: DefaultProfileRequest!) {\n  defaultProfile(request: $request) {\n    ...ProfileFields\n  }\n}"): (typeof documents)["query defaultProfile($request: DefaultProfileRequest!) {\n  defaultProfile(request: $request) {\n    ...ProfileFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query profile($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    ...ProfileFields\n  }\n}"): (typeof documents)["query profile($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    ...ProfileFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query profiles($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query profiles($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query publicationEncrypted($request: PublicationQueryRequest!, $profileId: ProfileId!) {\n  publication(request: $request) {\n    __typename\n    ... on Post {\n      ...PostFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n    ... on Comment {\n      ...CommentFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n    ... on Mirror {\n      ...MirrorFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n  }\n}"): (typeof documents)["query publicationEncrypted($request: PublicationQueryRequest!, $profileId: ProfileId!) {\n  publication(request: $request) {\n    __typename\n    ... on Post {\n      ...PostFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n    ... on Comment {\n      ...CommentFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n    ... on Mirror {\n      ...MirrorFields\n      canDecrypt(profileId: $profileId) {\n        result\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query publication($request: PublicationQueryRequest!) {\n  publication(request: $request) {\n    __typename\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}"): (typeof documents)["query publication($request: PublicationQueryRequest!) {\n  publication(request: $request) {\n    __typename\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query publications($request: PublicationsQueryRequest!) {\n  publications(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query publications($request: PublicationsQueryRequest!) {\n  publications(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query nfts($request: NFTsRequest!) {\n  nfts(request: $request) {\n    items {\n      contractName\n      contractAddress\n      symbol\n      tokenId\n      owners {\n        amount\n        address\n      }\n      name\n      description\n      contentURI\n      originalContent {\n        uri\n        metaType\n      }\n      chainId\n      collectionName\n      ercType\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query nfts($request: NFTsRequest!) {\n  nfts(request: $request) {\n    items {\n      contractName\n      contractAddress\n      symbol\n      tokenId\n      owners {\n        amount\n        address\n      }\n      name\n      description\n      contentURI\n      originalContent {\n        uri\n        metaType\n      }\n      chainId\n      collectionName\n      ercType\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query globalProtocolStats($request: GlobalProtocolStatsRequest) {\n  globalProtocolStats(request: $request) {\n    totalProfiles\n    totalBurntProfiles\n    totalPosts\n    totalMirrors\n    totalComments\n    totalCollects\n    totalFollows\n    totalRevenue {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n}"): (typeof documents)["query globalProtocolStats($request: GlobalProtocolStatsRequest) {\n  globalProtocolStats(request: $request) {\n    totalProfiles\n    totalBurntProfiles\n    totalPosts\n    totalMirrors\n    totalComments\n    totalCollects\n    totalFollows\n    totalRevenue {\n      asset {\n        name\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query hasTxHashBeenIndexed($request: HasTxHashBeenIndexedRequest!) {\n  hasTxHashBeenIndexed(request: $request) {\n    __typename\n    ... on TransactionIndexedResult {\n      indexed\n      txReceipt {\n        ...TxReceiptFields\n      }\n      metadataStatus {\n        status\n        reason\n      }\n    }\n    ... on TransactionError {\n      reason\n      txReceipt {\n        ...TxReceiptFields\n      }\n    }\n  }\n}"): (typeof documents)["query hasTxHashBeenIndexed($request: HasTxHashBeenIndexedRequest!) {\n  hasTxHashBeenIndexed(request: $request) {\n    __typename\n    ... on TransactionIndexedResult {\n      indexed\n      txReceipt {\n        ...TxReceiptFields\n      }\n      metadataStatus {\n        status\n        reason\n      }\n    }\n    ... on TransactionError {\n      reason\n      txReceipt {\n        ...TxReceiptFields\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation hidePublication($request: HidePublicationRequest!) {\n  hidePublication(request: $request)\n}"): (typeof documents)["mutation hidePublication($request: HidePublicationRequest!) {\n  hidePublication(request: $request)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createMirrorTypedData($request: CreateMirrorRequest!) {\n  createMirrorTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        MirrorWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        referenceModuleData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}"): (typeof documents)["mutation createMirrorTypedData($request: CreateMirrorRequest!) {\n  createMirrorTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        MirrorWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        referenceModuleData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MutualFollowersProfiles($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query MutualFollowersProfiles($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query nftOwnershipChallenge($request: NftOwnershipChallengeRequest!) {\n  nftOwnershipChallenge(request: $request) {\n    id\n    text\n  }\n}"): (typeof documents)["query nftOwnershipChallenge($request: NftOwnershipChallengeRequest!) {\n  nftOwnershipChallenge(request: $request) {\n    id\n    text\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query pendingApprovalFollows($request: PendingApprovalFollowsRequest!) {\n  pendingApprovalFollows(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query pendingApprovalFollows($request: PendingApprovalFollowsRequest!) {\n  pendingApprovalFollows(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ping {\n  ping\n}"): (typeof documents)["query ping {\n  ping\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createPostTypedData($request: CreatePublicPostRequest!) {\n  createPostTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        PostWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}"): (typeof documents)["mutation createPostTypedData($request: CreatePublicPostRequest!) {\n  createPostTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        PostWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProfileFeed($request: FeedRequest!) {\n  feed(request: $request) {\n    items {\n      root {\n        __typename\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      electedMirror {\n        mirrorId\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      mirrors {\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      collects {\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      reactions {\n        profile {\n          id\n          handle\n        }\n        reaction\n        timestamp\n      }\n      comments {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      prev\n      next\n      totalCount\n    }\n  }\n}"): (typeof documents)["query ProfileFeed($request: FeedRequest!) {\n  feed(request: $request) {\n    items {\n      root {\n        __typename\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      electedMirror {\n        mirrorId\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      mirrors {\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      collects {\n        profile {\n          id\n          handle\n        }\n        timestamp\n      }\n      reactions {\n        profile {\n          id\n          handle\n        }\n        reaction\n        timestamp\n      }\n      comments {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      prev\n      next\n      totalCount\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProfileFollowRevenue($request: ProfileFollowRevenueQueryRequest!) {\n  profileFollowRevenue(request: $request) {\n    revenues {\n      total {\n        asset {\n          name\n          symbol\n          decimals\n          address\n        }\n        value\n      }\n    }\n  }\n}"): (typeof documents)["query ProfileFollowRevenue($request: ProfileFollowRevenueQueryRequest!) {\n  profileFollowRevenue(request: $request) {\n    revenues {\n      total {\n        asset {\n          name\n          symbol\n          decimals\n          address\n        }\n        value\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProfilePublicationRevenue($request: ProfilePublicationRevenueQueryRequest!) {\n  profilePublicationRevenue(request: $request) {\n    items {\n      publication {\n        __typename\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n        ... on Mirror {\n          ...MirrorFields\n        }\n      }\n      revenue {\n        total {\n          asset {\n            name\n            symbol\n            decimals\n            address\n          }\n          value\n        }\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query ProfilePublicationRevenue($request: ProfilePublicationRevenueQueryRequest!) {\n  profilePublicationRevenue(request: $request) {\n    items {\n      publication {\n        __typename\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n        ... on Mirror {\n          ...MirrorFields\n        }\n      }\n      revenue {\n        total {\n          asset {\n            name\n            symbol\n            decimals\n            address\n          }\n          value\n        }\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProfilePublicationsForSale($request: ProfilePublicationsForSaleRequest!) {\n  profilePublicationsForSale(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query ProfilePublicationsForSale($request: ProfilePublicationsForSaleRequest!) {\n  profilePublicationsForSale(request: $request) {\n    items {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProxyActionStatus($proxyActionId: ProxyActionId!) {\n  proxyActionStatus(proxyActionId: $proxyActionId) {\n    ... on ProxyActionStatusResult {\n      txHash\n      txId\n      status\n    }\n    ... on ProxyActionError {\n      reason\n      lastKnownTxId\n    }\n    ... on ProxyActionQueued {\n      queuedAt\n    }\n  }\n}"): (typeof documents)["query ProxyActionStatus($proxyActionId: ProxyActionId!) {\n  proxyActionStatus(proxyActionId: $proxyActionId) {\n    ... on ProxyActionStatusResult {\n      txHash\n      txId\n      status\n    }\n    ... on ProxyActionError {\n      reason\n      lastKnownTxId\n    }\n    ... on ProxyActionQueued {\n      queuedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ProxyAction($request: ProxyActionRequest!) {\n  proxyAction(request: $request)\n}"): (typeof documents)["mutation ProxyAction($request: ProxyActionRequest!) {\n  proxyAction(request: $request)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PublicationRevenue($request: PublicationRevenueQueryRequest!) {\n  publicationRevenue(request: $request) {\n    publication {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    revenue {\n      total {\n        asset {\n          name\n          symbol\n          decimals\n          address\n        }\n        value\n      }\n    }\n  }\n}"): (typeof documents)["query PublicationRevenue($request: PublicationRevenueQueryRequest!) {\n  publicationRevenue(request: $request) {\n    publication {\n      __typename\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    revenue {\n      total {\n        asset {\n          name\n          symbol\n          decimals\n          address\n        }\n        value\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query recommendedProfiles {\n  recommendedProfiles {\n    ...ProfileFields\n  }\n}"): (typeof documents)["query recommendedProfiles {\n  recommendedProfiles {\n    ...ProfileFields\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Refresh($request: RefreshRequest!) {\n  refresh(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"): (typeof documents)["mutation Refresh($request: RefreshRequest!) {\n  refresh(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation removeReaction($request: ReactionRequest!) {\n  removeReaction(request: $request)\n}"): (typeof documents)["mutation removeReaction($request: ReactionRequest!) {\n  removeReaction(request: $request)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation reportPublication($request: ReportPublicationRequest!) {\n  reportPublication(request: $request)\n}"): (typeof documents)["mutation reportPublication($request: ReportPublicationRequest!) {\n  reportPublication(request: $request)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SearchProfiles($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on ProfileSearchResult {\n      __typename\n      items {\n        ... on Profile {\n          ...ProfileFields\n        }\n      }\n      pageInfo {\n        ...CommonPaginatedResultInfoFields\n      }\n    }\n  }\n}"): (typeof documents)["query SearchProfiles($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on ProfileSearchResult {\n      __typename\n      items {\n        ... on Profile {\n          ...ProfileFields\n        }\n      }\n      pageInfo {\n        ...CommonPaginatedResultInfoFields\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SearchPublications($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on PublicationSearchResult {\n      __typename\n      items {\n        __typename\n        ... on Comment {\n          ...CommentFields\n        }\n        ... on Post {\n          ...PostFields\n        }\n      }\n      pageInfo {\n        ...CommonPaginatedResultInfoFields\n      }\n    }\n  }\n}"): (typeof documents)["query SearchPublications($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on PublicationSearchResult {\n      __typename\n      items {\n        __typename\n        ... on Comment {\n          ...CommentFields\n        }\n        ... on Post {\n          ...PostFields\n        }\n      }\n      pageInfo {\n        ...CommonPaginatedResultInfoFields\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSetDefaultProfileTypedData($request: CreateSetDefaultProfileRequest!) {\n  createSetDefaultProfileTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDefaultProfileWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        wallet\n        profileId\n      }\n    }\n  }\n}"): (typeof documents)["mutation createSetDefaultProfileTypedData($request: CreateSetDefaultProfileRequest!) {\n  createSetDefaultProfileTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDefaultProfileWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        wallet\n        profileId\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSetFollowModuleTypedData($request: CreateSetFollowModuleRequest!) {\n  createSetFollowModuleTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowModuleWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        followModule\n        followModuleInitData\n      }\n    }\n  }\n}"): (typeof documents)["mutation createSetFollowModuleTypedData($request: CreateSetFollowModuleRequest!) {\n  createSetFollowModuleTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowModuleWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        followModule\n        followModuleInitData\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSetFollowNFTUriTypedData($request: CreateSetFollowNFTUriRequest!) {\n  createSetFollowNFTUriTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowNFTURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        profileId\n        deadline\n        followNFTURI\n      }\n    }\n  }\n}"): (typeof documents)["mutation createSetFollowNFTUriTypedData($request: CreateSetFollowNFTUriRequest!) {\n  createSetFollowNFTUriTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowNFTURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        profileId\n        deadline\n        followNFTURI\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSetProfileImageURITypedData($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURITypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetProfileImageURIWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        imageURI\n        profileId\n      }\n    }\n  }\n}"): (typeof documents)["mutation createSetProfileImageURITypedData($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURITypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetProfileImageURIWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        imageURI\n        profileId\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetProfileMetadataURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        metadata\n      }\n    }\n  }\n}"): (typeof documents)["mutation createSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetProfileMetadataURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        metadata\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createToggleFollowTypedData($request: CreateToggleFollowRequest!) {\n  createToggleFollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        ToggleFollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        enables\n      }\n    }\n  }\n}"): (typeof documents)["mutation createToggleFollowTypedData($request: CreateToggleFollowRequest!) {\n  createToggleFollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        ToggleFollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        enables\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createUnfollowTypedData($request: UnfollowRequest!) {\n  createUnfollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"): (typeof documents)["mutation createUnfollowTypedData($request: UnfollowRequest!) {\n  createUnfollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query notifications($request: NotificationRequest!) {\n  notifications(request: $request) {\n    items {\n      ... on NewFollowerNotification {\n        notificationId\n        ...NewFollowerNotificationFields\n      }\n      ... on NewMirrorNotification {\n        notificationId\n        ...NewMirrorNotificationFields\n      }\n      ... on NewCollectNotification {\n        notificationId\n        ...NewCollectNotificationFields\n      }\n      ... on NewCommentNotification {\n        notificationId\n        ...NewCommentNotificationFields\n      }\n      ... on NewMentionNotification {\n        notificationId\n        ...NewMentionNotificationFields\n      }\n      ... on NewReactionNotification {\n        notificationId\n        ...NewReactionNotificationFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}\n\nfragment CommentWithCommentedPublicationFields on Comment {\n  ...CommentFields\n  commentOn {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewFollowerNotificationFields on NewFollowerNotification {\n  __typename\n  createdAt\n  isFollowedByMe\n  wallet {\n    ...WalletFields\n  }\n}\n\nfragment NewCollectNotificationFields on NewCollectNotification {\n  __typename\n  createdAt\n  wallet {\n    ...WalletFields\n  }\n  collectedPublication {\n    __typename\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewMirrorNotificationFields on NewMirrorNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  publication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewCommentNotificationFields on NewCommentNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  comment {\n    ...CommentWithCommentedPublicationFields\n  }\n}\n\nfragment NewMentionNotificationFields on NewMentionNotification {\n  __typename\n  mentionPublication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n  createdAt\n}\n\nfragment NewReactionNotificationFields on NewReactionNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  reaction\n  publication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}"): (typeof documents)["query notifications($request: NotificationRequest!) {\n  notifications(request: $request) {\n    items {\n      ... on NewFollowerNotification {\n        notificationId\n        ...NewFollowerNotificationFields\n      }\n      ... on NewMirrorNotification {\n        notificationId\n        ...NewMirrorNotificationFields\n      }\n      ... on NewCollectNotification {\n        notificationId\n        ...NewCollectNotificationFields\n      }\n      ... on NewCommentNotification {\n        notificationId\n        ...NewCommentNotificationFields\n      }\n      ... on NewMentionNotification {\n        notificationId\n        ...NewMentionNotificationFields\n      }\n      ... on NewReactionNotification {\n        notificationId\n        ...NewReactionNotificationFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}\n\nfragment CommentWithCommentedPublicationFields on Comment {\n  ...CommentFields\n  commentOn {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewFollowerNotificationFields on NewFollowerNotification {\n  __typename\n  createdAt\n  isFollowedByMe\n  wallet {\n    ...WalletFields\n  }\n}\n\nfragment NewCollectNotificationFields on NewCollectNotification {\n  __typename\n  createdAt\n  wallet {\n    ...WalletFields\n  }\n  collectedPublication {\n    __typename\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewMirrorNotificationFields on NewMirrorNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  publication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}\n\nfragment NewCommentNotificationFields on NewCommentNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  comment {\n    ...CommentWithCommentedPublicationFields\n  }\n}\n\nfragment NewMentionNotificationFields on NewMentionNotification {\n  __typename\n  mentionPublication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n  createdAt\n}\n\nfragment NewReactionNotificationFields on NewReactionNotification {\n  __typename\n  createdAt\n  profile {\n    ...ProfileFields\n  }\n  reaction\n  publication {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n    ... on Comment {\n      ...CommentFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query verify($request: VerifyRequest!) {\n  verify(request: $request)\n}"): (typeof documents)["query verify($request: VerifyRequest!) {\n  verify(request: $request)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query whoCollectedPublication($request: WhoCollectedPublicationRequest!) {\n  whoCollectedPublication(request: $request) {\n    items {\n      ...WalletFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query whoCollectedPublication($request: WhoCollectedPublicationRequest!) {\n  whoCollectedPublication(request: $request) {\n    items {\n      ...WalletFields\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query WhoReactedPublication($request: WhoReactedPublicationRequest!) {\n  whoReactedPublication(request: $request) {\n    items {\n      reactionId\n      reaction\n      reactionAt\n      profile {\n        ...ProfileFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"): (typeof documents)["query WhoReactedPublication($request: WhoReactedPublicationRequest!) {\n  whoReactedPublication(request: $request) {\n    items {\n      reactionId\n      reaction\n      reactionAt\n      profile {\n        ...ProfileFields\n      }\n    }\n    pageInfo {\n      ...CommonPaginatedResultInfoFields\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;