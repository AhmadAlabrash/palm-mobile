/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query Challenge($address: EthereumAddress!) {\n      challenge(request: { address: $address }) {\n        text\n      }\n    }\n  ": types.ChallengeDocument,
    "\n    mutation Authenticate($address: EthereumAddress!, $signature: Signature!) {\n      authenticate(request: { address: $address, signature: $signature }) {\n        accessToken\n        refreshToken\n      }\n    }\n  ": types.AuthenticateDocument,
    "\n    mutation CreateFollowTypedData {\n      createFollowTypedData(\n        request: { follow: [{ profile: \"0x01\", followModule: null }] }\n      ) {\n        id\n        expiresAt\n        typedData {\n          domain {\n            name\n            chainId\n            version\n            verifyingContract\n          }\n          types {\n            FollowWithSig {\n              name\n              type\n            }\n          }\n          value {\n            nonce\n            deadline\n            profileIds\n            datas\n          }\n        }\n      }\n    }\n  ": types.CreateFollowTypedDataDocument,
    "\n    query Profile {\n      profile(request: { profileId: \"0x01\" }) {\n        id\n        name\n        bio\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        followNftAddress\n        metadata\n        isDefault\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n          __typename\n        }\n        handle\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n          __typename\n        }\n        ownedBy\n        dispatcher {\n          address\n          canUseRelay\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n            type\n            amount {\n              asset {\n                symbol\n                name\n                decimals\n                address\n              }\n              value\n            }\n            recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n          }\n          ... on RevertFollowModuleSettings {\n            type\n          }\n        }\n      }\n    }\n  ": types.ProfileDocument,
    "\n    query DefaultProfile($address: EthereumAddress!) {\n      defaultProfile(request: { ethereumAddress: $address }) {\n        id\n        name\n        bio\n        isDefault\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        followNftAddress\n        metadata\n        handle\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            chainId\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n        }\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            chainId\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n        }\n        ownedBy\n        dispatcher {\n          address\n          canUseRelay\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n            type\n            contractAddress\n            amount {\n              asset {\n                name\n                symbol\n                decimals\n                address\n              }\n              value\n            }\n            recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n          }\n          ... on RevertFollowModuleSettings {\n            type\n          }\n        }\n      }\n    }\n  ": types.DefaultProfileDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Challenge($address: EthereumAddress!) {\n      challenge(request: { address: $address }) {\n        text\n      }\n    }\n  "): (typeof documents)["\n    query Challenge($address: EthereumAddress!) {\n      challenge(request: { address: $address }) {\n        text\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation Authenticate($address: EthereumAddress!, $signature: Signature!) {\n      authenticate(request: { address: $address, signature: $signature }) {\n        accessToken\n        refreshToken\n      }\n    }\n  "): (typeof documents)["\n    mutation Authenticate($address: EthereumAddress!, $signature: Signature!) {\n      authenticate(request: { address: $address, signature: $signature }) {\n        accessToken\n        refreshToken\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateFollowTypedData {\n      createFollowTypedData(\n        request: { follow: [{ profile: \"0x01\", followModule: null }] }\n      ) {\n        id\n        expiresAt\n        typedData {\n          domain {\n            name\n            chainId\n            version\n            verifyingContract\n          }\n          types {\n            FollowWithSig {\n              name\n              type\n            }\n          }\n          value {\n            nonce\n            deadline\n            profileIds\n            datas\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateFollowTypedData {\n      createFollowTypedData(\n        request: { follow: [{ profile: \"0x01\", followModule: null }] }\n      ) {\n        id\n        expiresAt\n        typedData {\n          domain {\n            name\n            chainId\n            version\n            verifyingContract\n          }\n          types {\n            FollowWithSig {\n              name\n              type\n            }\n          }\n          value {\n            nonce\n            deadline\n            profileIds\n            datas\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Profile {\n      profile(request: { profileId: \"0x01\" }) {\n        id\n        name\n        bio\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        followNftAddress\n        metadata\n        isDefault\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n          __typename\n        }\n        handle\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n          __typename\n        }\n        ownedBy\n        dispatcher {\n          address\n          canUseRelay\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n            type\n            amount {\n              asset {\n                symbol\n                name\n                decimals\n                address\n              }\n              value\n            }\n            recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n          }\n          ... on RevertFollowModuleSettings {\n            type\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query Profile {\n      profile(request: { profileId: \"0x01\" }) {\n        id\n        name\n        bio\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        followNftAddress\n        metadata\n        isDefault\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n          __typename\n        }\n        handle\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n          __typename\n        }\n        ownedBy\n        dispatcher {\n          address\n          canUseRelay\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n            type\n            amount {\n              asset {\n                symbol\n                name\n                decimals\n                address\n              }\n              value\n            }\n            recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n          }\n          ... on RevertFollowModuleSettings {\n            type\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DefaultProfile($address: EthereumAddress!) {\n      defaultProfile(request: { ethereumAddress: $address }) {\n        id\n        name\n        bio\n        isDefault\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        followNftAddress\n        metadata\n        handle\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            chainId\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n        }\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            chainId\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n        }\n        ownedBy\n        dispatcher {\n          address\n          canUseRelay\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n            type\n            contractAddress\n            amount {\n              asset {\n                name\n                symbol\n                decimals\n                address\n              }\n              value\n            }\n            recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n          }\n          ... on RevertFollowModuleSettings {\n            type\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DefaultProfile($address: EthereumAddress!) {\n      defaultProfile(request: { ethereumAddress: $address }) {\n        id\n        name\n        bio\n        isDefault\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        followNftAddress\n        metadata\n        handle\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            chainId\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n        }\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            chainId\n            verified\n          }\n          ... on MediaSet {\n            original {\n              url\n              mimeType\n            }\n          }\n        }\n        ownedBy\n        dispatcher {\n          address\n          canUseRelay\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n            type\n            contractAddress\n            amount {\n              asset {\n                name\n                symbol\n                decimals\n                address\n              }\n              value\n            }\n            recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n          }\n          ... on RevertFollowModuleSettings {\n            type\n          }\n        }\n      }\n    }\n  "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;