fastlane_require 'dotenv'

platform :ios do

  before_all do |lane|
    Dotenv.overload '../.env'
    environment = lane_context[SharedValues::ENVIRONMENT]
    unless environment.nil?
        puts "Load .env file of #{environment}"
        Dotenv.overload '../.env.' + environment
        puts "ENV_NAME: #{ENV["ENV_NAME"]}"
    end
  end

  lane :bump_build_version do
    increment_build_number(xcodeproj: './ios/PalmApp.xcodeproj')
    commit_version_bump(message: 'Bump iOS build', xcodeproj: './ios/PalmApp.xcodeproj')
    git_pull
    push_to_git_remote
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    cert(
      username: ENV["FASTLANE_USERNAME"],
      team_id: ENV["FASTLANE_TEAM_ID"],
    )
    match(
      type: "adhoc",
      app_identifier: ENV["BUNDLE_ID"],
      username: ENV["FASTLANE_USERNAME"],
      readonly: true
    )
  end

  desc 'Fetch certificates. Build the iOS application.'
  lane :build do
    certificates
    gym
  end

  desc 'Fetch certificates, build and upload to App Center.'
  lane :beta do |options|
    if options[:bump]
      bump_build_version
    end
    build
    appcenter_upload(
      api_token: ENV["APPCENTER_IOS_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: ENV["APPCENTER_IOS_APP_NAME"],
      ipa: ENV["APPCENTER_IOS_DISTRIBUTE_IPA"],
      destinations: "*",
      notify_testers: true
    )
  end

  desc 'Codepush: Fetch certificates, build and upload to App Center.'
  lane :codepush do |options|
    codepush_login(login_token: ENV["APPCENTER_API_TOKEN"])
    if options[:bump]
      bump_build_version
    end
    build

    version = get_version_number(
      xcodeproj: "./ios/PalmApp.xcodeproj",
      target: ENV["FASTLANE_APP_NAME"]
    )
    build_number = get_build_number(xcodeproj: "./ios/PalmApp.xcodeproj")
    puts "Version string: #{version}.#{build_number}"

    appcenter_upload(
      api_token: ENV["APPCENTER_IOS_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: ENV["APPCENTER_IOS_APP_NAME"],
      ipa: ENV["APPCENTER_IOS_DISTRIBUTE_IPA"],
      destinations: "*",
      notify_testers: true
    )

    codepush_release_react(
      app_name: "#{ENV["APPCENTER_OWNER_NAME"]}/#{ENV["APPCENTER_IOS_APP_NAME"]}",
      plist_file: ENV["FASTLANE_IOS_PLIST"],
      mandatory: true,
      development: false,
      deployment_name: "Production",
      target_binary_version: "#{version}"
    )
    # codepush_logout
  end

end

# Generated .apk will be at android/app/build/outputs/apk/release/app-release.apk
platform :android do

  before_all do |lane|
    Dotenv.overload '../.env'
    environment = lane_context[SharedValues::ENVIRONMENT]
    unless environment.nil?
        puts "Load .env file of #{environment}"
        Dotenv.overload '../.env.' + environment
        puts "ENV_NAME: #{ENV["ENV_NAME"]}"
    end
  end

  desc 'Bump version and Build the Android application.'
  lane :bump_build_version do
    path = '../android/app/build.gradle'
    re = /def buildNumber = (\d+)/
    s = File.read(path)
    versionCode = s[re, 1].to_i
    s[re, 1] = (versionCode + 1).to_s

    f = File.new(path, 'w')
    f.write(s)
    f.close
    repo_clean = `git status --porcelain`.empty?
    if !repo_clean
      git_commit(path: 'android/app/build.gradle', message: 'Bump android build')
    end

    git_pull

    push_to_git_remote
  end


  desc 'Build the Android application.'
  lane :build do
    gradle(
      task: 'clean',
      project_dir: 'android/'
    )
    gradle(
      task: 'assemble',
      flavor: "Palm#{ENV["ENV_NAME"].capitalize}",
      build_type: 'Release',
      project_dir: 'android/'
    )
  end

  desc 'Build and upload to App Center.'
  lane :beta do |options|
    if options[:bump]
      bump_build_version
    end
    build
    appcenter_upload(
      api_token: ENV["APPCENTER_ANDROID_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: ENV["APPCENTER_ANDROID_APP_NAME"],
      apk: ENV["APPCENTER_ANDROID_DISTRIBUTE_APK"],
      destinations: "*",
      notify_testers: true,
      mandatory_update: true
    )
  end

  desc 'Codepush: Build and upload to App Center.'
  lane :codepush do |options|
    codepush_login(login_token: ENV["APPCENTER_API_TOKEN"])
    if options[:bump]
      bump_build_version
    end
    build
    appcenter_upload(
      api_token: ENV["APPCENTER_ANDROID_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: ENV["APPCENTER_ANDROID_APP_NAME"],
      apk: ENV["APPCENTER_ANDROID_DISTRIBUTE_APK"],
      destinations: "*",
      notify_testers: true,
      mandatory_update: true
    )
    codepush_release_react(
      app_name: "#{ENV["APPCENTER_OWNER_NAME"]}/#{ENV["APPCENTER_ANDROID_APP_NAME"]}",
      mandatory: true,
      development: false,
      deployment_name: "Production"
    )
    # codepush_logout
  end

end
